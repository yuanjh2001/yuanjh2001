package com.happynetwork.common.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.UUID;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;
import android.provider.Settings;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import com.nostra13.universalimageloader.utils.L;

/**
 * 根据设备产生唯一标识码，不刷rom的情况下尽量保证每次产生的标识码对应于该设备< /br>
 * 刷rom可能导致同一台设备产生不同的标识码< /br>
 * 恢复出厂并完全清除用户数据后可能会导致同一台设备产生不同的标识码，（概率较低）< /br>
 *
 */
public class DeviceUuidFactory {
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";
    protected static final String PREFS_DIR = "sysconfig" + File.separator + "happynetwork" + File.separator;
    protected static final String PREFS_FILE_NAME = ".sys.uuid.xf";
    private String dataDir;

    protected static UUID uuid;

    public DeviceUuidFactory(Context context) {

        if (uuid == null) {
            synchronized (DeviceUuidFactory.class) {
                if (uuid == null) {
                    //应用内文件查找
                    final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
                    final String id = prefs.getString(PREFS_DEVICE_ID, null);
                    if (id != null) {
                        uuid = UUID.fromString(id);
                        LogUtils.d("xml---");
                        if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                            saveConfig(getDataDir(),PREFS_FILE_NAME,uuid.toString());
                        }
                    } else {
                        //sd卡查找
                        final String sdcardId = getConfig(getDataDir(),PREFS_FILE_NAME);
                        if(sdcardId != null){
                            uuid = UUID.fromString(sdcardId);
                            LogUtils.d("sd---");
                            prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString()).commit();
                        }else {
                            //根据android_id生成
                            final String androidId = Secure.getString(context.getContentResolver(),Secure.ANDROID_ID);
                            try {
                                if (!"9774d56d682e549c".equals(androidId)) {
                                    uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
                                    LogUtils.d("aid---");
                                } else {
                                    //根据deviceId生成
                                    final String deviceId = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
                                    if(deviceId != null){
                                        uuid =  UUID.nameUUIDFromBytes(deviceId.getBytes("utf8"));
                                        LogUtils.d("did---");
                                    }else {
                                        //随机生成
                                        uuid = UUID.randomUUID();
                                        LogUtils.w("rid---");
                                    }
                                }
                            } catch (UnsupportedEncodingException e) {
                                throw new RuntimeException(e);
                            }
                            //根据文件查找未查到时要写入文件
                            prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString()).commit();
                            if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                                saveConfig(getDataDir(),PREFS_FILE_NAME,uuid.toString());
                            }
                        }
                    }

                }
            }
        }

    }

    /**
     * Returns a unique UUID for the current android device. As with all UUIDs,
     * this unique ID is "very highly likely" to be unique across all Android
     * devices. Much more so than ANDROID_ID is.
     * <p>
     * The UUID is generated by using ANDROID_ID as the base key if appropriate,
     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
     * be incorrect, and finally falling back on a random UUID that's persisted
     * to SharedPreferences if getDeviceID() does not return a usable value.
     * <p>
     * In some rare circumstances, this ID may change. In particular, if the
     * device is factory reset a new device ID may be generated. In addition, if
     * a user upgrades their phone from certain buggy implementations of Android
     * 2.2 to a newer, non-buggy version of Android, the device ID may change.
     * Or, if a user uninstalls your app on a device that has neither a proper
     * Android ID nor a Device ID, this ID may change on reinstallation.
     * <p>
     * Note that if the code falls back on using TelephonyManager.getDeviceId(),
     * the resulting ID will NOT change after a factory reset. Something to be
     * aware of.
     * <p>
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
     * directly.
     *
     * @return a UUID that may be used to uniquely identify your device for most
     * purposes.
     */
    public UUID getDeviceUuid() {
        return uuid;
    }


    public String getDataDir() {
        if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            dataDir = (dataDir == null || dataDir.equals(""))?Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator+PREFS_DIR:dataDir;
        }
        return dataDir;
    }

    private String getConfig(String dir, String fileName){
        File filex = new File(dir + fileName);
        String uuid = null;
        if (!filex.exists()) {
            return uuid;
        }
        uuid = getConfig(filex);
        return uuid;
    }

    private String getConfig(File file){
        String uuid = null;
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader(file));
            String temp;
            StringBuffer sb = new StringBuffer();
            while((temp = br.readLine()) != null){
                sb.append(temp);
            }
            uuid = sb.toString();
        } catch (Exception e) {
            LogUtils.w(e.toString());
        }
        return uuid;
    }

    private void saveConfig(String dir, String fileName,String uuid) {
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }
        File filey = new File(dir + fileName);
        if (filey.exists()) {
            if(uuid.equals(getConfig(filey))){
                LogUtils.d("---old===new----");
                return;
            }
            filey.delete();
            LogUtils.w("---old---del---");
        }
        try {
            filey.createNewFile();
        } catch (IOException e) {
            LogUtils.w(e.toString());
        }
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(filey));
            bw.write(uuid);
            bw.close();
        } catch (IOException e) {
            LogUtils.w(e.toString());
        }
    }
}
